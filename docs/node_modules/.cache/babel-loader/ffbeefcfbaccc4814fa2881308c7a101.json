{"ast":null,"code":"import React from\"react\";import{Card}from\"semantic-ui-react\";function Code(){return/*#__PURE__*/React.createElement(\"div\",{className:\"Code\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Code Examples\"),/*#__PURE__*/React.createElement(Card.Group,{centered:true},/*#__PURE__*/React.createElement(Card,{style:{width:\"400px\"}},/*#__PURE__*/React.createElement(Card.Content,null,/*#__PURE__*/React.createElement(Card.Header,null,\"Find Factorial\"),/*#__PURE__*/React.createElement(Card.Meta,null,\"Function\"),/*#__PURE__*/React.createElement(Card.Description,null,/*#__PURE__*/React.createElement(\"pre\",null,\"function findFactorial(x is Num) is Num {\",/*#__PURE__*/React.createElement(\"br\",null),\"  if(x == 0 or x == 1) {\",/*#__PURE__*/React.createElement(\"br\",null),\"    gimme x \",/*#__PURE__*/React.createElement(\"br\",null),\"  }\",/*#__PURE__*/React.createElement(\"br\",null),\"  gimme x * findFactorial(x - 1)\",/*#__PURE__*/React.createElement(\"br\",null),\"}\"),\" \"))),/*#__PURE__*/React.createElement(Card,{style:{width:\"400px\"}},/*#__PURE__*/React.createElement(Card.Content,null,/*#__PURE__*/React.createElement(Card.Header,null,\"Fizzbuzz\"),/*#__PURE__*/React.createElement(Card.Meta,null,\"Void Function\"),/*#__PURE__*/React.createElement(Card.Description,null,/*#__PURE__*/React.createElement(\"pre\",null,\"function fizzbuzz(x is Num) is Void {\",/*#__PURE__*/React.createElement(\"br\",null),\"  for i in range(0,x) {\",/*#__PURE__*/React.createElement(\"br\",null),\"    if (i%3 == 0 and i%5 == 0) {\",/*#__PURE__*/React.createElement(\"br\",null),\"      display \\\"fizzbuzz\\\"\",/*#__PURE__*/React.createElement(\"br\",null),\"    } else if (i % 3 == 0) {\",/*#__PURE__*/React.createElement(\"br\",null),\"      display \\\"fizz\\\"\",/*#__PURE__*/React.createElement(\"br\",null),\"    } else if (i % 5 == 0) {\",/*#__PURE__*/React.createElement(\"br\",null),\"      display \\\"buzz\\\"\",/*#__PURE__*/React.createElement(\"br\",null),\"    } else {\",/*#__PURE__*/React.createElement(\"br\",null),\"      display i\",/*#__PURE__*/React.createElement(\"br\",null),\"      }\",\" \",/*#__PURE__*/React.createElement(\"br\",null),\"    }\",\" \",/*#__PURE__*/React.createElement(\"br\",null),\"  }\",\" \",/*#__PURE__*/React.createElement(\"br\",null),\"}\"),\" \"))),/*#__PURE__*/React.createElement(Card,{style:{width:\"400px\"}},/*#__PURE__*/React.createElement(Card.Content,null,/*#__PURE__*/React.createElement(Card.Header,null,\"Negative Checker\"),/*#__PURE__*/React.createElement(Card.Meta,null,\"Function\"),/*#__PURE__*/React.createElement(Card.Description,null,/*#__PURE__*/React.createElement(\"pre\",null,\"function negativeChecker(x is Num) is Bool {\",/*#__PURE__*/React.createElement(\"br\",null),\"  gimme x < 0 ? true : false\",/*#__PURE__*/React.createElement(\"br\",null),\"}\",/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(Card.Meta,null,\"Variable Assignment\"),\"trueVal is Bool negativeChecker(5)\"),\" \")))),/*#__PURE__*/React.createElement(Card.Group,{centered:true},/*#__PURE__*/React.createElement(Card,{style:{width:\"400px\"}},/*#__PURE__*/React.createElement(Card.Content,null,/*#__PURE__*/React.createElement(Card.Header,null,\"Find First Odd Number\"),/*#__PURE__*/React.createElement(Card.Meta,null,\"Function\"),/*#__PURE__*/React.createElement(Card.Description,null,/*#__PURE__*/React.createElement(\"pre\",null,\"function findFirstOdd(x is Num) is Num {\",/*#__PURE__*/React.createElement(\"br\",null),\"  for i in range(0, x) {\",/*#__PURE__*/React.createElement(\"br\",null),\"   if(i % 2 != 0) {\",/*#__PURE__*/React.createElement(\"br\",null),\"      gimme i}\",/*#__PURE__*/React.createElement(\"br\",null),\"    }\",/*#__PURE__*/React.createElement(\"br\",null),\"  }\",/*#__PURE__*/React.createElement(\"br\",null),\"}\"),\" \"))),/*#__PURE__*/React.createElement(Card,{style:{width:\"400px\"}},/*#__PURE__*/React.createElement(Card.Content,null,/*#__PURE__*/React.createElement(Card.Header,null,\"Find First Odd Number\"),/*#__PURE__*/React.createElement(Card.Meta,null,\"Constant Arrow Function\"),/*#__PURE__*/React.createElement(Card.Description,null,/*#__PURE__*/React.createElement(\"pre\",null,\"arrowFunction is always (x is Num) is Num => {\",/*#__PURE__*/React.createElement(\"br\",null),\"   gimme x + 1\",/*#__PURE__*/React.createElement(\"br\",null),\"}\"),\" \"))),/*#__PURE__*/React.createElement(Card,{style:{width:\"400px\"}},/*#__PURE__*/React.createElement(Card.Content,null,/*#__PURE__*/React.createElement(Card.Header,null,\"Comments\"),/*#__PURE__*/React.createElement(Card.Meta,null,\"Single-Line\"),/*#__PURE__*/React.createElement(Card.Description,null,/*#__PURE__*/React.createElement(\"pre\",null,\"btw: this is a single-line comment!\",/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(Card.Meta,null,\"Multi-Line\"),\"fyi: This is\\n                    a multi-line\\n                                Comment! :xoxo\"),\" \")))));}export default Code;","map":{"version":3,"sources":["/Users/taliabahar/Desktop/Code/Inkling/docs/src/Code.js"],"names":["React","Card","Code","width"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,KAAqB,mBAArB,CAEA,QAASC,CAAAA,IAAT,EAAgB,CACd,mBACE,2BAAK,SAAS,CAAC,MAAf,eACE,8CADF,cAEE,oBAAC,IAAD,CAAM,KAAN,EAAY,QAAQ,KAApB,eACE,oBAAC,IAAD,EAAM,KAAK,CAAE,CAAEC,KAAK,CAAE,OAAT,CAAb,eACE,oBAAC,IAAD,CAAM,OAAN,mBACE,oBAAC,IAAD,CAAM,MAAN,uBADF,cAEE,oBAAC,IAAD,CAAM,IAAN,iBAFF,cAGE,oBAAC,IAAD,CAAM,WAAN,mBACE,wFAEE,8BAFF,yCAIE,8BAJF,6BAME,8BANF,oBAQE,8BARF,iDAUE,8BAVF,KADF,CAaS,GAbT,CAHF,CADF,CADF,cAsBE,oBAAC,IAAD,EAAM,KAAK,CAAE,CAAEA,KAAK,CAAE,OAAT,CAAb,eACE,oBAAC,IAAD,CAAM,OAAN,mBACE,oBAAC,IAAD,CAAM,MAAN,iBADF,cAEE,oBAAC,IAAD,CAAM,IAAN,sBAFF,cAGE,oBAAC,IAAD,CAAM,WAAN,mBACE,oFAEE,8BAFF,wCAIE,8BAJF,iDAME,8BANF,2CAQE,8BARF,6CAUE,8BAVF,uCAYE,8BAZF,6CAcE,8BAdF,uCAgBE,8BAhBF,6BAkBE,8BAlBF,gCAoBE,8BApBF,4BAqBc,8BArBd,0BAsBY,8BAtBZ,wBAuBU,8BAvBV,KADF,CA0BS,GA1BT,CAHF,CADF,CAtBF,cAwDE,oBAAC,IAAD,EAAM,KAAK,CAAE,CAAEA,KAAK,CAAE,OAAT,CAAb,eACE,oBAAC,IAAD,CAAM,OAAN,mBACE,oBAAC,IAAD,CAAM,MAAN,yBADF,cAEE,oBAAC,IAAD,CAAM,IAAN,iBAFF,cAGE,oBAAC,IAAD,CAAM,WAAN,mBACE,2FAEE,8BAFF,6CAIE,8BAJF,kBAME,8BANF,cAOE,8BAPF,cAQE,oBAAC,IAAD,CAAM,IAAN,4BARF,sCADF,CAWS,GAXT,CAHF,CADF,CAxDF,CAFF,cA8EE,oBAAC,IAAD,CAAM,KAAN,EAAY,QAAQ,KAApB,eACE,oBAAC,IAAD,EAAM,KAAK,CAAE,CAAEA,KAAK,CAAE,OAAT,CAAb,eACE,oBAAC,IAAD,CAAM,OAAN,mBACE,oBAAC,IAAD,CAAM,MAAN,8BADF,cAEE,oBAAC,IAAD,CAAM,IAAN,iBAFF,cAGE,oBAAC,IAAD,CAAM,WAAN,mBACE,uFAEE,8BAFF,yCAIE,8BAJF,oCAME,8BANF,+BAQE,8BARF,sBAUE,8BAVF,oBAYE,8BAZF,KADF,CAeS,GAfT,CAHF,CADF,CADF,cAwBE,oBAAC,IAAD,EAAM,KAAK,CAAE,CAAEA,KAAK,CAAE,OAAT,CAAb,eACE,oBAAC,IAAD,CAAM,OAAN,mBACE,oBAAC,IAAD,CAAM,MAAN,8BADF,cAEE,oBAAC,IAAD,CAAM,IAAN,gCAFF,cAGE,oBAAC,IAAD,CAAM,WAAN,mBACE,6FAEE,8BAFF,+BAIE,8BAJF,KADF,CAOS,GAPT,CAHF,CADF,CAxBF,cAuCE,oBAAC,IAAD,EAAM,KAAK,CAAE,CAAEA,KAAK,CAAE,OAAT,CAAb,eACE,oBAAC,IAAD,CAAM,OAAN,mBACE,oBAAC,IAAD,CAAM,MAAN,iBADF,cAEE,oBAAC,IAAD,CAAM,IAAN,oBAFF,cAGE,oBAAC,IAAD,CAAM,WAAN,mBACE,kFAEE,8BAFF,cAGE,8BAHF,cAIE,oBAAC,IAAD,CAAM,IAAN,mBAJF,kGADF,CASS,GATT,CAHF,CADF,CAvCF,CA9EF,CADF,CA0ID,CAED,cAAeD,CAAAA,IAAf","sourcesContent":["import React from \"react\";\nimport { Card } from \"semantic-ui-react\";\n\nfunction Code() {\n  return (\n    <div className=\"Code\">\n      <h1>Code Examples</h1>\n      <Card.Group centered>\n        <Card style={{ width: \"400px\" }}>\n          <Card.Content>\n            <Card.Header>Find Factorial</Card.Header>\n            <Card.Meta>Function</Card.Meta>\n            <Card.Description>\n              <pre>\n                {`function findFactorial(x is Num) is Num {`}\n                <br />\n                {`  if(x == 0 or x == 1) {`}\n                <br />\n                {`    gimme x `}\n                <br />\n                {`  }`}\n                <br />\n                {`  gimme x * findFactorial(x - 1)`}\n                <br />\n                {`}`}\n              </pre>{\" \"}\n            </Card.Description>\n          </Card.Content>\n        </Card>\n        <Card style={{ width: \"400px\" }}>\n          <Card.Content>\n            <Card.Header>Fizzbuzz</Card.Header>\n            <Card.Meta>Void Function</Card.Meta>\n            <Card.Description>\n              <pre>\n                {`function fizzbuzz(x is Num) is Void {`}\n                <br />\n                {`  for i in range(0,x) {`}\n                <br />\n                {`    if (i%3 == 0 and i%5 == 0) {`}\n                <br />\n                {`      display \"fizzbuzz\"`}\n                <br />\n                {`    } else if (i % 3 == 0) {`}\n                <br />\n                {`      display \"fizz\"`}\n                <br />\n                {`    } else if (i % 5 == 0) {`}\n                <br />\n                {`      display \"buzz\"`}\n                <br />\n                {`    } else {`}\n                <br />\n                {`      display i`}\n                <br />\n                {`      }`} <br />\n                {`    }`} <br />\n                {`  }`} <br />\n                {`}`}\n              </pre>{\" \"}\n            </Card.Description>\n          </Card.Content>\n        </Card>\n        <Card style={{ width: \"400px\" }}>\n          <Card.Content>\n            <Card.Header>Negative Checker</Card.Header>\n            <Card.Meta>Function</Card.Meta>\n            <Card.Description>\n              <pre>\n                {`function negativeChecker(x is Num) is Bool {`}\n                <br />\n                {`  gimme x < 0 ? true : false`}\n                <br />\n                {`}`}\n                <br />\n                <br />\n                <Card.Meta>Variable Assignment</Card.Meta>\n                {`trueVal is Bool negativeChecker(5)`}\n              </pre>{\" \"}\n            </Card.Description>\n          </Card.Content>\n        </Card>\n      </Card.Group>\n      <Card.Group centered>\n        <Card style={{ width: \"400px\" }}>\n          <Card.Content>\n            <Card.Header>Find First Odd Number</Card.Header>\n            <Card.Meta>Function</Card.Meta>\n            <Card.Description>\n              <pre>\n                {`function findFirstOdd(x is Num) is Num {`}\n                <br />\n                {`  for i in range(0, x) {`}\n                <br />\n                {`   if(i % 2 != 0) {`}\n                <br />\n                {`      gimme i}`}\n                <br />\n                {`    }`}\n                <br />\n                {`  }`}\n                <br />\n                {`}`}\n              </pre>{\" \"}\n            </Card.Description>\n          </Card.Content>\n        </Card>\n        <Card style={{ width: \"400px\" }}>\n          <Card.Content>\n            <Card.Header>Find First Odd Number</Card.Header>\n            <Card.Meta>Constant Arrow Function</Card.Meta>\n            <Card.Description>\n              <pre>\n                {`arrowFunction is always (x is Num) is Num => {`}\n                <br />\n                {`   gimme x + 1`}\n                <br />\n                {`}`}\n              </pre>{\" \"}\n            </Card.Description>\n          </Card.Content>\n        </Card>\n        <Card style={{ width: \"400px\" }}>\n          <Card.Content>\n            <Card.Header>Comments</Card.Header>\n            <Card.Meta>Single-Line</Card.Meta>\n            <Card.Description>\n              <pre>\n                {`btw: this is a single-line comment!`}\n                <br />\n                <br />\n                <Card.Meta>Multi-Line</Card.Meta>\n                {`fyi: This is\n                    a multi-line\n                                Comment! :xoxo`}\n              </pre>{\" \"}\n            </Card.Description>\n          </Card.Content>\n        </Card>\n      </Card.Group>\n    </div>\n  );\n}\n\nexport default Code;\n"]},"metadata":{},"sourceType":"module"}